# This file is generated by translate_mathematica.py
# Do not edit this file directly
# Instead, edit amps_mathematica.m and run translate_mathematica.py
# to regenerate this file
#
# This file contains the translation of Mathematica code to Python
# unp.sing the sympy library
#
m12 = Symbol('m12')
mpi0 = Symbol('mpi0')
CoefB = Symbol('CoefB')
theta_S = Symbol('theta_S')
CoefA = Symbol('CoefA')
deltaI = Symbol('deltaI')
thetaALP = Symbol('thetaALP')
thetapi = Symbol('thetapi')
thetaprpi = Symbol('thetaprpi')
thetaprALP = Symbol('thetaprALP')
cg = Symbol('cg')
kappad = Symbol('kappad')
kappau = Symbol('kappau')
thpiALP = Symbol('thpiALP')
CoefC = Symbol('CoefC')
CoefD = Symbol('CoefD')
ma = Symbol('ma')
mK = Symbol('mK')
msigma = Symbol('msigma')
Gammasigma = Symbol('Gammasigma')
UnitStep = Function('UnitStep')
e = -(m12 - 2*mpi0**2)*(2*CoefB*np.sin(theta_S) + np.sqrt(2)*(CoefA - CoefB)*np.cos(theta_S))*(-(-8*CoefA*deltaI*thetaALP*thetapi + 2*np.sqrt(2)*CoefA*deltaI*thetaALP*thetaprpi + 2*np.sqrt(2)*CoefA*deltaI*thetapi*thetaprALP + 8*CoefA*deltaI*thetaprALP*thetaprpi + 4*CoefB*cg*(-np.sqrt(6)*deltaI*thetapi + 2*np.sqrt(3)*deltaI*thetaprpi + kappad*(2*np.sqrt(6)*deltaI*thetapi - np.sqrt(3)*deltaI*thetaprpi + 3) + kappau*(2*np.sqrt(6)*deltaI*thetapi - np.sqrt(3)*deltaI*thetaprpi - 3)) + 12*CoefB*deltaI*thetaALP*thetapi + 12*CoefB*deltaI*thetaprALP*thetaprpi - 12*CoefB*thpiALP + 4*CoefC*deltaI*thetaALP*thetapi + 5*np.sqrt(2)*CoefC*deltaI*thetaALP*thetaprpi + 5*np.sqrt(2)*CoefC*deltaI*thetapi*thetaprALP + 8*CoefC*deltaI*thetaprALP*thetaprpi + 4*CoefD*deltaI*thetaALP*thetapi + 8*np.sqrt(2)*CoefD*deltaI*thetaALP*thetaprpi + 8*np.sqrt(2)*CoefD*deltaI*thetapi*thetaprALP + 32*CoefD*deltaI*thetaprALP*thetaprpi + np.sqrt(3)*cg*deltaI*(-2*np.sqrt(2)*CoefA*thetapi*(3*kappad + 3*kappau - 2) + 4*CoefA*thetaprpi + np.sqrt(2)*CoefC*thetapi*(kappad + kappau + 2) + 2*CoefC*thetaprpi*(2*kappad + 2*kappau + 1) + 4*CoefD*(np.sqrt(2)*thetapi + 4*thetaprpi)))*np.sin(theta_S) + 2*(2*np.sqrt(2)*CoefA*deltaI*thetaALP*thetapi + 2*CoefA*deltaI*thetaALP*thetaprpi + 2*CoefA*deltaI*thetapi*thetaprALP + np.sqrt(2)*CoefA*deltaI*thetaprALP*thetaprpi + 3*np.sqrt(2)*CoefA*thpiALP + 3*np.sqrt(2)*CoefB*deltaI*thetaALP*thetapi + 3*np.sqrt(2)*CoefB*deltaI*thetaprALP*thetaprpi - 3*np.sqrt(2)*CoefB*thpiALP - np.sqrt(2)*CoefC*deltaI*thetaALP*thetapi - CoefC*deltaI*thetaALP*thetaprpi - CoefC*deltaI*thetapi*thetaprALP + 4*np.sqrt(2)*CoefC*deltaI*thetaprALP*thetaprpi + np.sqrt(2)*CoefD*deltaI*thetaALP*thetapi + 4*CoefD*deltaI*thetaALP*thetaprpi + 4*CoefD*deltaI*thetapi*thetaprALP + 8*np.sqrt(2)*CoefD*deltaI*thetaprALP*thetaprpi + cg*(CoefA*(kappad*(2*np.sqrt(3)*deltaI*thetapi + np.sqrt(6)*deltaI*thetaprpi - 3*np.sqrt(2)) + kappau*(2*np.sqrt(3)*deltaI*thetapi + np.sqrt(6)*deltaI*thetaprpi + 3*np.sqrt(2))) - CoefB*(-4*np.sqrt(3)*deltaI*kappau*thetapi + np.sqrt(6)*deltaI*kappau*thetaprpi + 2*np.sqrt(3)*deltaI*thetapi - 2*np.sqrt(6)*deltaI*thetaprpi + kappad*(-4*np.sqrt(3)*deltaI*thetapi + np.sqrt(6)*deltaI*thetaprpi - 3*np.sqrt(2)) + 3*np.sqrt(2)*kappau) + np.sqrt(3)*deltaI*(-CoefC*(kappad*thetapi + 2*np.sqrt(2)*kappad*thetaprpi + kappau*thetapi + 2*np.sqrt(2)*kappau*thetaprpi - 3*np.sqrt(2)*thetaprpi) + 2*CoefD*(thetapi + 2*np.sqrt(2)*thetaprpi))))*np.cos(theta_S))*(m12 - ma**2 - mpi0**2)*UnitStep(-m12 + 4*mK**2)/(24*(m12 + I*msigma*(Gammasigma + I*msigma)))